================================================================================
EEG数据结构分析报告 (本地参考文档，不提交到Git)
================================================================================
生成时间: 2025-10-30
用途: 后端开发数据加载方案的参考

================================================================================
一、数据文件概览
================================================================================

1. 数据位置:
   - processed_data (去除EOG):
     /Users/yangminyue/coding_coding/EEG_local/processed_data/A01T_continuous_epochs.npz

   - processed_data_cleaned (提取MI段):
     /Users/yangminyue/coding_coding/EEG_local/processed_data_cleaned/A01T_continuous_epochs_cleaned.npz

2. 文件命名规则:
   - A01T-A09T: 9个受试者
   - T: Training session
   - continuous_epochs: 连续时段的epoch化数据

================================================================================
二、NPZ文件内部结构
================================================================================

每个npz文件包含7个键:

1. eeg_data:
   - 形状: (22, 672528)  # 22通道 × 672528采样点
   - 类型: float64
   - 说明: 连续EEG信号（22个EEG通道）
   - 前5个通道应该是: C3, Cz, C4, CP1, CP2（需要验证通道顺序）

2. eog_data:
   - 形状: (3, 672528)
   - 类型: float64
   - 说明: EOG通道数据（眼电）

3. etyp (Event Type):
   - 形状: (603,)
   - 类型: string
   - 说明: 事件类型标记
   - 关键事件类型:
     * '768': Cue onset (提示开始) - 288次
     * '769': Left hand (左手) - 72次
     * '770': Right hand (右手) - 72次
     * '771': Foot (脚) - 72次
     * '772': Tongue (舌头) - 72次
     * '1023': Rejected trial (被拒绝的trial) - 15次
     * 其他: 系统标记

4. epos (Event Position):
   - 形状: (603,)
   - 类型: int64
   - 说明: 每个事件在连续数据中的位置（采样点索引）

5. edur (Event Duration):
   - 形状: (603,)
   - 类型: int64
   - 说明: 事件持续时间（采样点数）
   - MI事件持续: 1000 samples = 4秒

6. artifacts:
   - 形状: (288,)
   - 类型: int64
   - 说明: 伪迹标记（0=干净，1=有伪迹）
   - 干净trials: 273个
   - 有伪迹: 15个

7. sfreq:
   - 标量: 250.0
   - 说明: 采样率 250Hz

================================================================================
三、Trial组织结构
================================================================================

每个受试者有288个trials:
- Left hand: 72 trials (标签 0)
- Right hand: 72 trials (标签 1)
- Foot: 72 trials (标签 2)
- Tongue: 72 trials (标签 3)

Trial模式:
- Event序列: '768' (cue) -> '769/770/771/772' (MI类型)
- Cue持续: 1875 samples (7.5秒)
- MI持续: 1000 samples (4秒)

事件时序:
  [768 - Cue onset] --> [769/770/771/772 - MI execution]
       7.5秒                    4秒

================================================================================
四、数据切分逻辑
================================================================================

从连续数据中提取单个trial的方法:

1. 查找所有MI事件 (769/770/771/772)
2. 对于每个MI事件:
   - event_pos = epos[i]  # 事件起始位置
   - event_dur = edur[i]  # 事件持续时间（1000）
   - label = event_type_to_label(etyp[i])  # 769->0, 770->1, 771->2, 772->3

3. 提取数据:
   - trial_data = eeg_data[:, event_pos:event_pos+event_dur]
   - shape: (22, 1000) -> 需要选择前5个通道 -> (5, 1000)

4. Trial ID生成:
   - 格式: "A01T001", "A01T002", ..., "A01T288"
   - Subject: A01-A09
   - Index: 001-288

================================================================================
五、前端需要的数据格式
================================================================================

前端期望的格式 (参考前端接口需求文档):

{
  "channels": {
    "C3": [float array],
    "Cz": [float array],
    "C4": [float array],
    "CP1": [float array],
    "CP2": [float array]
  },
  "labels": [0, 0.004, 0.008, ..., 3.996],  # 时间标签（秒）
  "samplingRate": 250,
  "trialInfo": {
    "id": "A01T001",
    "subject": 1,
    "trialIndex": 1,
    "motionType": "left",  # or "right", "foot", "tongue"
    "label": 0  # 0-3
  }
}

================================================================================
六、通道映射（需要验证）
================================================================================

假设22个通道的顺序（BCI Competition IV标准）:
索引  通道名
0     Fz
1     FC3
2     FC1
3     FCz
4     FC2
5     FC4
6     C5
7     C3     <- 需要 (index 7)
8     C1
9     Cz     <- 需要 (index 9)
10    C2
11    C4     <- 需要 (index 11)
12    C6
13    CP5
14    CP3
15    CP1    <- 需要 (index 15)
16    CPz
17    CP2    <- 需要 (index 17)
18    CP4
19    CP6
20    P1
21    Pz

⚠️ 需要实际验证22通道的真实顺序！

================================================================================
七、数据加载策略
================================================================================

【方案1】实时切分（推荐）:
1. 加载完整的npz文件到内存（每个文件~100MB）
2. 根据event标记实时切分trials
3. 缓存常用的trials

优点:
- 灵活，可以动态处理
- 节省存储空间
- 易于维护

缺点:
- 首次加载稍慢

【方案2】预切分:
1. 预处理时将所有trials切分好
2. 保存为独立文件（如 A01T001.npy）
3. 需要时直接加载

优点:
- 加载速度快
- 简单直接

缺点:
- 占用更多存储空间
- 数据冗余
- 维护复杂

**推荐使用方案1**

================================================================================
八、EOG移除和MI提取的区别
================================================================================

1. processed_data (去除EOG):
   - eeg_data数值范围: [-0.0016, 0.0001]
   - 标准差: 0.000056
   - 说明: 已经去除EOG通道的影响，但保留完整时序

2. processed_data_cleaned (提取MI段):
   - eeg_data数值范围: [-0.00014, 0.00012]
   - 标准差: 0.00001
   - 说明: 进一步清洗，标准化处理
   - 注意: 文件更大（3.5倍），可能包含额外特征或不同的数据组织

⚠️ 两个文件的eeg_data形状相同 (22, 672528)，说明cleaned版本可能：
   - 应用了更强的滤波/标准化
   - 或者包含其他隐藏的处理

================================================================================
九、实施建议
================================================================================

1. 首先验证22通道的实际顺序
2. 创建DataLoader服务加载npz文件
3. 实现trial切分逻辑
4. 实现通道选择（提取C3, Cz, C4, CP1, CP2）
5. 实现格式转换（npz -> 前端JSON格式）
6. 添加缓存机制提高性能

================================================================================
十、待确认问题
================================================================================

1. 22通道的实际顺序是什么？
2. processed_data和processed_data_cleaned的具体处理差异？
3. 是否需要额外的滤波或预处理？
4. 是否需要支持其他通道组合？

================================================================================
结束
================================================================================
